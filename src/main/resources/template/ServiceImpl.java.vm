package ${package}.${moduleName}.service.impl;

import org.springframework.stereotype.Service;

import java.util.Map;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.Query;

import ${package}.${moduleName}.dao.${className}Dao;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.service.${className}Service;

/**
 * @Description:
 * @Author: ${author}
 * @Date: Create in ${datetime}
 */
@Service
public class ${classname}ServiceImpl implements ${classname}Service {

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private ${classname}Mapper ${constantName}Mapper;

    /**
     * 查询列表数据
     *
     * @param query 查询条件
     * @param page  页码
     * @param size  每页的数量
     * @return 列表数据
     */
    @Override
    public PageInfo<${className}VO> queryList(${classname}Query query, Integer page, Integer size) {
        if (page != null && size != null) {
            PageHelper.startPage(page, size);
        }
        List<${className}VO> ${constantName}List = ${constantName}Mapper.queryList(query);
        return new PageInfo<>(${constantName}List);
    }

    /**
     * 单体查询
     *
     * @param ${pk.attrname} 实体主键
     * @return 单体数据
     */
    public ${classname}VO get${classname}Info(${pk.attrType} ${pk.attrname}) {
        return ${constantName}Mapper.selectByPrimaryId(${pk.attrname});
    }

    /**
     * 单体添加
     *
     * @param insertDTO 插入POJO
     * @return 插入状态标识
     */
    @Override
    public int insertSelective(${classname}DTO insertDTO) {
        return ${constantName}Mapper.insertSelective(dto);
    }

    /**
     * 单体更新
     *
     * @param updateDTO 更新POJO
     * @return 更新状态标识
     */
    @Override
    public int updateByPrimaryKeySelective(${classname}DTO updateDTO) {
        return ${constantName}Mapper.updateByPrimaryKeySelective(updateDTO);
    }

    /**
     * 单体删除
     *
     * @param ${pk.attrname} 实体主键
     * @return 删除状态标识
     */
    @Override
    public int deleteByPrimaryKey(${pk.attrType} ${pk.attrname}) {
        return ${constantName}Mapper.deleteByPrimaryKey(${pk.attrname});
    }

}