package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;

import cn.bywin.scmp.common.basic.entity.Result;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import ${package}.${moduleName}.entity.${classname};
import ${package}.${moduleName}.service.${className}Service;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.R;


/**
 * @Description:
 * @Author: ${author}
 * @Date: Create in ${datetime}
 */
@RestController
@RequestMapping("/${constantName}Api" )
public class ${classname}Api {

    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private ${classname}Service ${constantName}Service;

    /**
     * 查询列表数据
     *
     * @param ${classname} 查询条件
     * @param page       页码
     * @param size       每页的数量
     * @return 列表数据
     */
    @RequestMapping("/list" )
    @ApiLog(name = "查询列表数据" )
    public Result qurey${classname}List(@RequestBody(required = false) ${classname}Query ${constantName}, Integer page, Integer size) throws Exception {
        LOGGER.info("queryList|condition={},page={},size={}" , JSON.toJSONString(${constantName}), page, size);
        try {
            PageInfo<${classname}> ${constantName}List = ${classname}Service.queryList(${constantName}, page, size);
            return sendOK(new PageResult(${constantName}List));
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new Exception("查询列表出错:" + e.getMessage());
        }
    }


    /**
     * 单体查询
     *
     * @param ${pk.attrname} 实体主键
     * @return 单体数据
     */
    @RequestMapping("/get/{${pk.attrname}}" )
    @ApiLog(name = "单体查询" )
    public Result query${classname}Info(@PathVariable("${pk.attrname}" ) ${pk.attrType} ${pk.attrname}) {
        LOGGER.info("query | id={}" , JSON.toJSONString(${pk.attrname}));
        try {
            return sendOK(${constantName}Service.get${classname}Info(${pk.attrname}));
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new Exception("单体查询出错:" + e.getMessage());
        }
    }

    /**
     * 单体添加
     *
     * @param ${classname} 添加实体
     * @return 插入状态标识
     */
    @RequestMapping("/save" )
    @ApiLog(name = "添加${classname}信息" )
    public Result save${classname}(@RequestBody ${classname}DTO ${constantName}) {
        LOGGER.info("save |${constantName}={}" , JSON.toJSONString(${constantName}));
        try {
            int res = ${constantName}Service.insertSelective(${constantName});
            return res > 0 ? sendOk("添加成功") : sendError("添加失败");
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new Exception("单体插入出错:" + e.getMessage());
        }
    }

    /**
     * 单体更新
     *
     * @param ${classname} 更新实体
     * @return 更新状态标识
     */
    @RequestMapping("/update" )
    @ApiLog(name = "修改${classname}信息" )
    public Result update${classname}(@RequestBody ${classname}DTO ${constantName}) {
        LOGGER.info("update |${constantName}={}" , JSON.toJSONString(${constantName}));
        try {
            int res = ${constantName}Service.updateByPrimaryKeySelective(${constantName})
            return res > 0 ? sendOk("更新成功") : sendError("更新失败");
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new Exception("单体更新出错:" + e.getMessage());
        }
    }

    /**
     * 单体删除
     *
     * @param ${classname} 删除实体
     * @return 删除状态标识
     */
    @RequestMapping("/delete/{id}" )
    @ApiLog(name = "单体删除" )
    public Result delete${classname}(@PathVariable("${pk.attrname}" ) ${pk.attrType} ${pk.attrname}) {
        LOGGER.info("delete |${pk.attrnam}={}" , JSON.toJSONString(pk.attrnam));
        try {
            int res = ${constantName}Service.deleteByPrimaryKey(id)
            return res > 0 ? sendOk("删除成功") : sendError("删除失败");
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new Exception("单体删除出错:" + e.getMessage());
        }
    }

}
